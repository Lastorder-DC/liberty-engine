#!/usr/bin/env node

'use strict';

const {
  existsSync, writeFileSync, readdirSync, renameSync, unlinkSync, readFileSync,
} = require('fs');
const path = require('path');
const crypto = require('crypto');
const { promisify } = require('util');
const inquirer = require('inquirer');
const { execSync } = require('child_process');
const randomBytesAsync = promisify(crypto.randomBytes);
const configPath = path.join(__dirname, '..', 'config', 'config.json');
const mediaFilePath = path.join(__dirname, '..', 'media');
const colors = require('colors/safe');

(async () => {
  try {
    if (existsSync(configPath)) {
      const answers = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'clear',
          message: 'config.json is found. Do you want to clear the data of your wiki?',
          default: false
        }
      ]);
      if (!answers.clear) {
        return;
      }
    }
    
    const { createDbUser, createDatabase } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'createDatabase',
        message: 'Do you want to create new database?',
        default: true
      },
      {
        type: 'confirm',
        name: 'createDbUser',
        message: 'Do you want to create mysql user?',
        default: true
      }
    ]);
    
    const { dbName, dbUsername, dbPassword, rootPassword } = await inquirer.prompt([
      {
        type: 'input',
        name: 'dbName',
        message: 'database name'
      },
      {
        type: 'input',
        name: 'dbUsername',
        message: 'database username'
      },
      {
        type: 'password',
        name: 'dbPassword',
        message: 'database password'
      },
      {
        type: 'password',
        name: 'rootPassword',
        message: 'database root password'
      }
    ]);
    
    if (createDatabase) {
      execSync(`mysql -uroot -p${rootPassword} -e "create database ${dbName};"`);
    }
    if (createDbUser) {
      execSync(`mysql -uroot -p${rootPassword} -e "create user '${dbUsername}'@'localhost' identified by '${dbPassword}';"`);
    }
    execSync(`mysql -uroot -p${rootPassword} -e "grant all privileges on ${dbName}.* to '${dbUsername}'@'localhost';"`);
    execSync('mysql -uroot -p${rootPassword} -e "flush privileges;"');
    
    console.log(colors.green('User/DB setup is complete.'));
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'wikiName',
        message: 'the name of wiki',
      },
      {
        type: 'input',
        name: 'wikiDomain',
        message: 'Wiki server domain name (e.g., www.wiki.com)',
        default: 'localhost',
      },
      {
        type: 'input',
        name: 'adminUsername',
        message: 'Wiki admin username',
      },
      {
        type: 'password',
        name: 'adminPassword',
        message: 'Wiki admin password',
      },
      {
        type: 'input',
        name: 'frontPageName',
        message: 'Wiki front page',
      },
    ]);
    const secret = (await randomBytesAsync(48))
      .toString('base64')
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
    const config = {
      production: {
        secret,
        db: {
          username: dbUsername,
          password: dbPassword,
          database: dbName,
          host: 'localhost',
          port: '3306',
          dialect: 'mysql',
          charset: 'utf8mb4',
          collate: 'utf8mb4_bin',
          pool: { max: 40, min: 0, idle: 10000 },
        },
        mediaFileStorage: {
          type: 'local',
        },
      },
      development: {
        secret,
        db: {
          username: dbUsername,
          password: dbPassword,
          database: dbName,
          host: 'localhost',
          port: '3306',
          dialect: 'mysql',
          charset: 'utf8mb4',
          collate: 'utf8mb4_bin',
          pool: { max: 40, min: 0, idle: 10000 },
        },
        mediaFileStorage: {
          type: 'local',
        },
      },
    };
    const configJSON = JSON.stringify(config, null, 2);
    writeFileSync(configPath, configJSON);
    const models = require('../lib/models');
    await models.install({
      wikiName: answers.wikiName,
      domain: answers.wikiDomain,
      adminUsername: answers.adminUsername,
      adminPassword: answers.adminPassword,
      frontPageName: answers.frontPageName,
    });
    await models.sequelize.query(`
      ALTER TABLE articleSearch
      DROP INDEX article_search_content,
      ADD FULLTEXT INDEX article_search_content (content ASC)  COMMENT 'parser "TokenBigramIgnoreBlankSplitSymbolAlphaDigit"'
    `);
    await models.sequelize.query('DROP TABLE IF EXISTS SequelizeMeta');
    await models.sequelize.query(`
      CREATE TABLE SequelizeMeta (
        name varchar(255) COLLATE utf8_unicode_ci NOT NULL,
        PRIMARY KEY (name),
        UNIQUE KEY name (name),
        UNIQUE KEY SequelizeMeta_name_unique (name)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
    `);
    const migrations = readdirSync(path.join(__dirname, '..', 'db-migrations'));
    for (const migration of migrations) {
      await models.sequelize.query(`
        INSERT INTO SequelizeMeta (name) VALUES (${models.sequelize.escape(migration)})
      `);
    }

    await models.initialize();
    readdirSync(path.join(__dirname, '..', 'media'))
      .filter(file => (file.indexOf('.') !== 0) && (!['removed', 'temp', '.gitkeep'].includes(file)))
      .forEach((file) => {
        renameSync(path.join(mediaFilePath, file), path.join(mediaFilePath, 'removed', file));
      });
    readdirSync(path.join(__dirname, '..', 'media', 'temp'))
      .filter(file => (file.indexOf('.') !== 0) && (!['.gitkeep'].includes(file)))
      .forEach((file) => {
        unlinkSync(path.join(mediaFilePath, 'temp', file));
      });
    const { createNginx } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'createNginx',
        message: 'Do you want to create nginx site config(only works on Ubuntu)?',
        default: true
      }
    ]);
    if(createNginx) {
      const nginxTemplate = readFileSync(path.join(__dirname, 'nginx-template'), 'utf8');
      const nginxConfig = nginxTemplate
        .replace(/\{\{server_name\}\}/g, answers.wikiDomain)
        .replace(/\{\{root_path\}\}/g, path.join(__dirname, '..'));
      const tempPath = path.join(__dirname, 'libertyengine');
      if (existsSync(tempPath)) unlinkSync(tempPath);
      writeFileSync(tempPath, nginxConfig);
      execSync(`sudo rm -f /etc/nginx/sites-available/libertyengine && sudo rm -f /etc/nginx/sites-enabled/libertyengine && sudo mv ${tempPath} /etc/nginx/sites-available && sudo ln -s /etc/nginx/sites-available/libertyengine /etc/nginx/sites-enabled/libertyengine`);
      execSync('sudo service nginx reload');
    }
    console.log(colors.green('done'));
    process.exit(0);
  } catch (err) {
    console.log(err);
    process.exit(-1);
  }
})();
